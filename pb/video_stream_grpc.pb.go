// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: video_stream.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VideoStream_StreamVideo_FullMethodName = "/VideoStream/StreamVideo"
)

// VideoStreamClient is the client API for VideoStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoStreamClient interface {
	StreamVideo(ctx context.Context, in *VideoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VideoChunk], error)
}

type videoStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoStreamClient(cc grpc.ClientConnInterface) VideoStreamClient {
	return &videoStreamClient{cc}
}

func (c *videoStreamClient) StreamVideo(ctx context.Context, in *VideoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VideoChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VideoStream_ServiceDesc.Streams[0], VideoStream_StreamVideo_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[VideoRequest, VideoChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VideoStream_StreamVideoClient = grpc.ServerStreamingClient[VideoChunk]

// VideoStreamServer is the server API for VideoStream service.
// All implementations must embed UnimplementedVideoStreamServer
// for forward compatibility.
type VideoStreamServer interface {
	StreamVideo(*VideoRequest, grpc.ServerStreamingServer[VideoChunk]) error
	mustEmbedUnimplementedVideoStreamServer()
}

// UnimplementedVideoStreamServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVideoStreamServer struct{}

func (UnimplementedVideoStreamServer) StreamVideo(*VideoRequest, grpc.ServerStreamingServer[VideoChunk]) error {
	return status.Errorf(codes.Unimplemented, "method StreamVideo not implemented")
}
func (UnimplementedVideoStreamServer) mustEmbedUnimplementedVideoStreamServer() {}
func (UnimplementedVideoStreamServer) testEmbeddedByValue()                     {}

// UnsafeVideoStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoStreamServer will
// result in compilation errors.
type UnsafeVideoStreamServer interface {
	mustEmbedUnimplementedVideoStreamServer()
}

func RegisterVideoStreamServer(s grpc.ServiceRegistrar, srv VideoStreamServer) {
	// If the following call pancis, it indicates UnimplementedVideoStreamServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VideoStream_ServiceDesc, srv)
}

func _VideoStream_StreamVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VideoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VideoStreamServer).StreamVideo(m, &grpc.GenericServerStream[VideoRequest, VideoChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VideoStream_StreamVideoServer = grpc.ServerStreamingServer[VideoChunk]

// VideoStream_ServiceDesc is the grpc.ServiceDesc for VideoStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VideoStream",
	HandlerType: (*VideoStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamVideo",
			Handler:       _VideoStream_StreamVideo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "video_stream.proto",
}
